import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton

TOKEN = "7935033084:AAHphmEyQFMmRXPrPC5vC0kjA_E2XPq2s3o"
bot = telebot.TeleBot(TOKEN)

PAYMENT_LINK = (
    "https://checkout.paygate.to/process-payment.php?"
    "address=uTuEcf3KjCh%2FBgTu3dEy9PXYtchgyer01u1aOOqBwqzAmKxF036iBkkBxTZ%2BtsRamReAdEXG%2BLM9yOzH1hdVnA%3D%3D"
    "&amount=35&provider=mercuryo&email=markfish100%40outlook.com&currency=USD"
)

WALLET_ADDRESSES = {
    'btc': "1JBfmrjKbtHyqVtxC11w9GPgQJcfUJTeH8",
    'usdt_trc': "TS88vt8uENtbWifnr8W1o9gdPJxwGomrud",
    'usdt_bep': "0x197C2575974E2E8CAc60Eca1643BC7eaE97D5C0e",
    'usdt_matic': "0x197C2575974E2E8CAc60Eca1643BC7eaE97D5C0e",
    'xmr': "48YNhAmbSaWBjKTxgRynGPFwcES3FrsBmTeLHHAew4yMWYFdBkYNjqk3U3XME5MwFRBzasuEDiroAH659LzGeYZqCjmHSn9"
}

CRYPTO_OPTIONS = {
    'btc': "₿ Bitcoin (BTC)",
    'usdt_trc': "💎 USDT (TRC-20)",
    'usdt_bep': "💎 USDT (BEP-20)",
    'usdt_matic': "💎 USDT (Polygon)",
    'xmr': "🍘 Monero (XMR)"
}

PROMO_TEXT = (
    "*🔐 Join to PRIVATE VIP CHANNEL 💎*\n\n"
    "*1️⃣ Full Archive of deleted channel content (more than 1TB+ Content) 👅*\n\n"
    "*2️⃣ Full Uncensored Videos & Pics of Hottest ASMR Girl (Onlyfans & Patreon Archive) 🔞*\n\n"
    "*3️⃣ Constantly updated with new content almost every day 🔥*\n\n"
    "*4️⃣ Download with no limits available for all content ✅*\n\n"
    "_The value of all this content is over $10,000 💵. But you can get them for only $35 😍_\n\n"
    "*One-Time Payment / Lifetime Access 💫*\n\n"
    "*Price = $ 35 💵USD*\n\n"
    "*____________________________________*"
)

FOLLOWUP_TEXT = (
    "*💳 Payment Details* 💳\n\n"
    "💸 Amount: $35 USD \n"
    "⏱️ Processing Time: ~1-5 minutes\n\n"
    "*✅ When you have paid click “I PAID” and send the screenshot or photo of payment to this chat.*\n\n"
    "🔰_Need Support? dm ➡️ @paulcodio1_"
)

ADMIN_ID = 5555098293
PRIVATE_CHANNEL_ID = -1002293298397

@bot.message_handler(commands=['start'])
def send_start(message):
    with open("q04x_5nw.jpg", "rb") as photo:
        bot.send_photo(message.chat.id, photo)
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("🚀 JOIN", callback_data="join_now"))
    bot.send_message(message.chat.id, "Welcome! Click JOIN to see the offer.", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "join_now")
def handle_join(call):
    markup = InlineKeyboardMarkup(row_width=1)
    markup.add(
        InlineKeyboardButton("💳 Credit Card", callback_data="pay_card"),
        InlineKeyboardButton("💸 Apple Pay, Google Pay etc.", callback_data="pay_paypal"),
        InlineKeyboardButton("🅿️ PayPal", callback_data="pay_cashapp"),
        InlineKeyboardButton("🪙 Telegram Wallet", callback_data="pay_tgwallet"),
        InlineKeyboardButton("₿ Crypto", callback_data="pay_crypto"),
        InlineKeyboardButton("🔙 Back", callback_data="back_to_start")
    )
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=PROMO_TEXT,
        reply_markup=markup,
        parse_mode="Markdown"
    )

@bot.callback_query_handler(func=lambda call: call.data == "back_to_start")
def back_to_start(call):
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("🚀 JOIN", callback_data="join_now"))
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text="*Welcome! Click JOIN to see the offer.*",
        reply_markup=markup
    )

@bot.callback_query_handler(func=lambda call: call.data in ["pay_card", "pay_paypal"])
def handle_payment(call):
    markup = InlineKeyboardMarkup(row_width=1)
    markup.add(
        InlineKeyboardButton("👉 Click here to pay", url=PAYMENT_LINK),
        InlineKeyboardButton("✅ I PAID", callback_data="i_paid"),
        InlineKeyboardButton("🔙 Back", callback_data="join_now")
    )
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=FOLLOWUP_TEXT,
        reply_markup=markup,
        parse_mode="Markdown"
    )

@bot.callback_query_handler(func=lambda call: call.data == "pay_cashapp")
def handle_cashapp(call):
    text = (
        "*🅿️ How to pay with PAYPAL or CASHAPP?*\n\n"
        "*Open the site or app and select buy crypto. Select Bitcoin and put $35 as the amount. Once purchased go to the send item, select the amount (equivalent of $35), and paste the address I wrote below. Next do on send to pay*\n\n"
        "*👇BTC Address:👇*\n"
        "`1JBfmrjKbtHyqVtxC11w9GPgQJcfUJTeH8`\n\n"
        "*✅ When you have paid click “I PAID” and send the screenshot or photo of payment to this chat.*"
    )
    markup = InlineKeyboardMarkup(row_width=1)
    markup.add(
        InlineKeyboardButton("✅ I PAID", callback_data="i_paid"),
        InlineKeyboardButton("🔙 Back", callback_data="join_now")
    )
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=text, reply_markup=markup, parse_mode="Markdown")

@bot.callback_query_handler(func=lambda call: call.data == "pay_tgwallet")
def handle_telegram_wallet(call):
    text = (
        "*🪙 How to pay with TELEGRAM WALLET ?*\n\n"
        "*Open the @WALLET bot and purchase USDT ($35) with your card. Next send your USDT ($35) to the address given below.*\n\n"
        "*👇USDT (TRC20) Address👇*\n"
        "`TS88vt8uENtbWifnr8W1o9gdPJxwGomrud`\n\n"
        "*✅ When you have paid click “I PAID” and send the screenshot or photo of payment to this chat.*"
    )
    markup = InlineKeyboardMarkup(row_width=1)
    markup.add(
        InlineKeyboardButton("✅ I PAID", callback_data="i_paid"),
        InlineKeyboardButton("🔙 Back", callback_data="join_now")
    )
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=text, reply_markup=markup, parse_mode="Markdown")

@bot.callback_query_handler(func=lambda call: call.data == "pay_crypto")
def choose_crypto(call):
    markup = InlineKeyboardMarkup(row_width=1)
    for key, label in CRYPTO_OPTIONS.items():
        markup.add(InlineKeyboardButton(label, callback_data=f"crypto_{key}"))
    markup.add(InlineKeyboardButton("🔙 Back", callback_data="join_now"))
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text="🔮 Select your prefer cryptocurrency:",
        reply_markup=markup
    )

@bot.callback_query_handler(func=lambda call: call.data.startswith("crypto_"))
def handle_crypto(call):
    crypto_type = call.data.split("_", 1)[1]
    if crypto_type not in CRYPTO_OPTIONS:
        bot.answer_callback_query(call.id, "Invalid selection.")
        return

    details = (
        f"*💳 {CRYPTO_OPTIONS[crypto_type]} Payment Details* 💳\n\n"
        f"*📍 Wallet Address*:\n`{WALLET_ADDRESSES[crypto_type]}`\n\n"
        "💸 Amount: $35 USD equivalent\n"
        "⏱️ Processing Time: ~1-5 minutes\n\n"
        "*When you have paid click “I PAID” and send the screenshot or photo of payment to this chat.*\n\n"
        "🔰_Need Support? dm ➡️ @paulcodio1_"
    )

    markup = InlineKeyboardMarkup(row_width=1)
    markup.add(
        InlineKeyboardButton("✅ I PAID", callback_data="i_paid"),
        InlineKeyboardButton("🔙 Back to Crypto", callback_data="pay_crypto")
    )
    bot.send_message(call.message.chat.id, details, reply_markup=markup, parse_mode="Markdown")
    bot.delete_message(call.message.chat.id, call.message.message_id)

@bot.callback_query_handler(func=lambda call: call.data == "i_paid")
def confirm_paid(call):
    bot.send_message(
        call.message.chat.id,
        "*📤 Please send the screenshot or photo of payment to this chat and you will be added*\n\n"
        "🔰_Need Support? dm ➡️ @paulcodio1_",  
        parse_mode="Markdown"
    )

@bot.message_handler(content_types=['photo'])
def handle_payment_proof(message):
    caption = f"📩 New payment proof from @{message.from_user.username or message.from_user.first_name} (ID: {message.from_user.id})"
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("✅ Approve", callback_data=f"approve_{message.from_user.id}"))
    bot.forward_message(ADMIN_ID, message.chat.id, message.message_id)
    bot.send_message(ADMIN_ID, caption, reply_markup=markup)
    bot.send_message(
        message.chat.id,
        "*✅ Image received. It will be processed and you will receive a response as soon as possible.*\n\n"
        "🔰_Need Support? dm ➡️ @paulcodio1_",
        parse_mode="Markdown"
    )

@bot.callback_query_handler(func=lambda call: call.data.startswith("approve_"))
def approve_user(call):
    user_id = int(call.data.split("_")[1])
    try:
        invite = bot.create_chat_invite_link(chat_id=PRIVATE_CHANNEL_ID, member_limit=1, expire_date=None)
        bot.send_message(user_id, f"🎉🎉🎉 YOU HAVE BEEN APPROVED!\nTHIS IS YOUR LINK FOR JOIN 🎉🎉🎉 :\n{invite.invite_link}")
        bot.answer_callback_query(call.id, "User approved and link sent.")
    except Exception as e:
        bot.answer_callback_query(call.id, f"Error: {str(e)}")

bot.polling()